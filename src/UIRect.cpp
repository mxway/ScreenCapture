#include "UIRect.h"

/**
 * The following code is generated by Tongyi Qianwen Larger Language Model
 */

int get_right(const UIRect *rect) {
    return rect->x + rect->width;
}

int get_bottom(const UIRect *rect) {
    return rect->y + rect->height;
}

UIRect rect_union(const UIRect *rect1, const UIRect *rect2) {
    UIRect result;

    // calculate the TopLeft of Union Rectangle
    result.x = (rect1->x < rect2->x) ? rect1->x : rect2->x;
    result.y = (rect1->y < rect2->y) ? rect1->y : rect2->y;

    // calculate the BottomRight of Union Rectangle
    int right = (get_right(rect1) > get_right(rect2)) ? get_right(rect1) : get_right(rect2);
    int bottom = (get_bottom(rect1) > get_bottom(rect2)) ? get_bottom(rect1) : get_bottom(rect2);

    result.width = right - result.x;
    result.height = bottom - result.y;

    return result;
}

UIRect rect_intersection(const UIRect *rect1, const UIRect *rect2) {
    UIRect result;

    // calculate the TopLeft of Intersection Rectangle
    result.x = (rect1->x > rect2->x) ? rect1->x : rect2->x;
    result.y = (rect1->y > rect2->y) ? rect1->y : rect2->y;

    //calculate BottomRight of Intersection Rectangle
    int right = (get_right(rect1) < get_right(rect2)) ? get_right(rect1) : get_right(rect2);
    int bottom = (get_bottom(rect1) < get_bottom(rect2)) ? get_bottom(rect1) : get_bottom(rect2);

    // if the Intersection is Empty,return empty Rectangle.
    if (result.x >= right || result.y >= bottom) {
        result.x = result.y = result.width = result.height = 0;
        return result;
    }

    result.width = right - result.x;
    result.height = bottom - result.y;

    return result;
}

void rect_difference(const UIRect *rect1, const UIRect *rect2, UIRect *result, int *count) {
    *count = 0;

    //check if the intersection of two rectangles is empty,if the intersection is empty,return rect1.
    UIRect intersection = rect_intersection(rect1, rect2);
    if (intersection.width == 0 || intersection.height == 0) {
        result[*count] = *rect1;
        (*count)++;
        return;
    }

    //if rect1 is a subset of rect2,the difference set should be empty.
    if (intersection.x <= rect1->x &&
        intersection.y <= rect1->y &&
        get_right(&intersection) >= get_right(rect1) &&
        get_bottom(&intersection) >= get_bottom(rect1)) {
        return;
    }

    // The difference set may generate up to four rectangles

    // Top
    if (rect1->y < intersection.y) {
        result[*count].x = rect1->x;
        result[*count].y = rect1->y;
        result[*count].width = rect1->width;
        result[*count].height = intersection.y - rect1->y;
        (*count)++;
    }

    // Bottom
    if (get_bottom(rect1) > get_bottom(&intersection)) {
        result[*count].x = rect1->x;
        result[*count].y = get_bottom(&intersection);
        result[*count].width = rect1->width;
        result[*count].height = get_bottom(rect1) - get_bottom(&intersection);
        (*count)++;
    }

    // Left
    if (rect1->x < intersection.x) {
        result[*count].x = rect1->x;
        result[*count].y = intersection.y;
        result[*count].width = intersection.x - rect1->x;
        result[*count].height = intersection.height;
        (*count)++;
    }

    // Right
    if (get_right(rect1) > get_right(&intersection)) {
        result[*count].x = get_right(&intersection);
        result[*count].y = intersection.y;
        result[*count].width = get_right(rect1) - get_right(&intersection);
        result[*count].height = intersection.height;
        (*count)++;
    }
}